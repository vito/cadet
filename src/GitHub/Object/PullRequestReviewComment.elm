-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Object.PullRequestReviewComment exposing (..)

import GitHub.Enum.CommentAuthorAssociation
import GitHub.Enum.CommentCannotUpdateReason
import GitHub.Enum.PullRequestReviewCommentState
import GitHub.Enum.ReactionContent
import GitHub.InputObject
import GitHub.Interface
import GitHub.Object
import GitHub.Scalar
import GitHub.ScalarCodecs
import GitHub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The actor who authored the comment.
-}
author :
    SelectionSet decodesTo GitHub.Interface.Actor
    -> SelectionSet (Maybe decodesTo) GitHub.Object.PullRequestReviewComment
author object_ =
    Object.selectionForCompositeField "author" [] object_ (identity >> Decode.nullable)


{-| Author's association with the subject of the comment.
-}
authorAssociation : SelectionSet GitHub.Enum.CommentAuthorAssociation.CommentAuthorAssociation GitHub.Object.PullRequestReviewComment
authorAssociation =
    Object.selectionForField "Enum.CommentAuthorAssociation.CommentAuthorAssociation" "authorAssociation" [] GitHub.Enum.CommentAuthorAssociation.decoder


{-| The comment body of this review comment.
-}
body : SelectionSet String GitHub.Object.PullRequestReviewComment
body =
    Object.selectionForField "String" "body" [] Decode.string


{-| The body rendered to HTML.
-}
bodyHTML : SelectionSet GitHub.ScalarCodecs.Html GitHub.Object.PullRequestReviewComment
bodyHTML =
    Object.selectionForField "ScalarCodecs.Html" "bodyHTML" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| The comment body of this review comment rendered as plain text.
-}
bodyText : SelectionSet String GitHub.Object.PullRequestReviewComment
bodyText =
    Object.selectionForField "String" "bodyText" [] Decode.string


{-| Identifies the commit associated with the comment.
-}
commit :
    SelectionSet decodesTo GitHub.Object.Commit
    -> SelectionSet (Maybe decodesTo) GitHub.Object.PullRequestReviewComment
commit object_ =
    Object.selectionForCompositeField "commit" [] object_ (identity >> Decode.nullable)


{-| Identifies when the comment was created.
-}
createdAt : SelectionSet GitHub.ScalarCodecs.DateTime GitHub.Object.PullRequestReviewComment
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Check if this comment was created via an email reply.
-}
createdViaEmail : SelectionSet Bool GitHub.Object.PullRequestReviewComment
createdViaEmail =
    Object.selectionForField "Bool" "createdViaEmail" [] Decode.bool


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) GitHub.Object.PullRequestReviewComment
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The diff hunk to which the comment applies.
-}
diffHunk : SelectionSet String GitHub.Object.PullRequestReviewComment
diffHunk =
    Object.selectionForField "String" "diffHunk" [] Decode.string


{-| Identifies when the comment was created in a draft state.
-}
draftedAt : SelectionSet GitHub.ScalarCodecs.DateTime GitHub.Object.PullRequestReviewComment
draftedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "draftedAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The actor who edited the comment.
-}
editor :
    SelectionSet decodesTo GitHub.Interface.Actor
    -> SelectionSet (Maybe decodesTo) GitHub.Object.PullRequestReviewComment
editor object_ =
    Object.selectionForCompositeField "editor" [] object_ (identity >> Decode.nullable)


id : SelectionSet GitHub.ScalarCodecs.Id GitHub.Object.PullRequestReviewComment
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Check if this comment was edited and includes an edit with the creation data
-}
includesCreatedEdit : SelectionSet Bool GitHub.Object.PullRequestReviewComment
includesCreatedEdit =
    Object.selectionForField "Bool" "includesCreatedEdit" [] Decode.bool


{-| Returns whether or not a comment has been minimized.
-}
isMinimized : SelectionSet Bool GitHub.Object.PullRequestReviewComment
isMinimized =
    Object.selectionForField "Bool" "isMinimized" [] Decode.bool


{-| The moment the editor made the last edit
-}
lastEditedAt : SelectionSet (Maybe GitHub.ScalarCodecs.DateTime) GitHub.Object.PullRequestReviewComment
lastEditedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "lastEditedAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| Returns why the comment was minimized.
-}
minimizedReason : SelectionSet (Maybe String) GitHub.Object.PullRequestReviewComment
minimizedReason =
    Object.selectionForField "(Maybe String)" "minimizedReason" [] (Decode.string |> Decode.nullable)


{-| Identifies the original commit associated with the comment.
-}
originalCommit :
    SelectionSet decodesTo GitHub.Object.Commit
    -> SelectionSet (Maybe decodesTo) GitHub.Object.PullRequestReviewComment
originalCommit object_ =
    Object.selectionForCompositeField "originalCommit" [] object_ (identity >> Decode.nullable)


{-| The original line index in the diff to which the comment applies.
-}
originalPosition : SelectionSet Int GitHub.Object.PullRequestReviewComment
originalPosition =
    Object.selectionForField "Int" "originalPosition" [] Decode.int


{-| Identifies when the comment body is outdated
-}
outdated : SelectionSet Bool GitHub.Object.PullRequestReviewComment
outdated =
    Object.selectionForField "Bool" "outdated" [] Decode.bool


{-| The path to which the comment applies.
-}
path : SelectionSet String GitHub.Object.PullRequestReviewComment
path =
    Object.selectionForField "String" "path" [] Decode.string


{-| The line index in the diff to which the comment applies.
-}
position : SelectionSet (Maybe Int) GitHub.Object.PullRequestReviewComment
position =
    Object.selectionForField "(Maybe Int)" "position" [] (Decode.int |> Decode.nullable)


{-| Identifies when the comment was published at.
-}
publishedAt : SelectionSet (Maybe GitHub.ScalarCodecs.DateTime) GitHub.Object.PullRequestReviewComment
publishedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "publishedAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| The pull request associated with this review comment.
-}
pullRequest :
    SelectionSet decodesTo GitHub.Object.PullRequest
    -> SelectionSet decodesTo GitHub.Object.PullRequestReviewComment
pullRequest object_ =
    Object.selectionForCompositeField "pullRequest" [] object_ identity


{-| The pull request review associated with this review comment.
-}
pullRequestReview :
    SelectionSet decodesTo GitHub.Object.PullRequestReview
    -> SelectionSet (Maybe decodesTo) GitHub.Object.PullRequestReviewComment
pullRequestReview object_ =
    Object.selectionForCompositeField "pullRequestReview" [] object_ (identity >> Decode.nullable)


{-| A list of reactions grouped by content left on the subject.
-}
reactionGroups :
    SelectionSet decodesTo GitHub.Object.ReactionGroup
    -> SelectionSet (Maybe (List decodesTo)) GitHub.Object.PullRequestReviewComment
reactionGroups object_ =
    Object.selectionForCompositeField "reactionGroups" [] object_ (identity >> Decode.list >> Decode.nullable)


type alias ReactionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , content : OptionalArgument GitHub.Enum.ReactionContent.ReactionContent
    , orderBy : OptionalArgument GitHub.InputObject.ReactionOrder
    }


{-| A list of Reactions left on the Issue.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - content - Allows filtering Reactions by emoji.
  - orderBy - Allows specifying the order in which reactions are returned.

-}
reactions :
    (ReactionsOptionalArguments -> ReactionsOptionalArguments)
    -> SelectionSet decodesTo GitHub.Object.ReactionConnection
    -> SelectionSet decodesTo GitHub.Object.PullRequestReviewComment
reactions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, content = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "content" filledInOptionals.content (Encode.enum GitHub.Enum.ReactionContent.toString), Argument.optional "orderBy" filledInOptionals.orderBy GitHub.InputObject.encodeReactionOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "reactions" optionalArgs object_ identity


{-| The comment this is a reply to.
-}
replyTo :
    SelectionSet decodesTo GitHub.Object.PullRequestReviewComment
    -> SelectionSet (Maybe decodesTo) GitHub.Object.PullRequestReviewComment
replyTo object_ =
    Object.selectionForCompositeField "replyTo" [] object_ (identity >> Decode.nullable)


{-| The repository associated with this node.
-}
repository :
    SelectionSet decodesTo GitHub.Object.Repository
    -> SelectionSet decodesTo GitHub.Object.PullRequestReviewComment
repository object_ =
    Object.selectionForCompositeField "repository" [] object_ identity


{-| The HTTP path permalink for this review comment.
-}
resourcePath : SelectionSet GitHub.ScalarCodecs.Uri GitHub.Object.PullRequestReviewComment
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Identifies the state of the comment.
-}
state : SelectionSet GitHub.Enum.PullRequestReviewCommentState.PullRequestReviewCommentState GitHub.Object.PullRequestReviewComment
state =
    Object.selectionForField "Enum.PullRequestReviewCommentState.PullRequestReviewCommentState" "state" [] GitHub.Enum.PullRequestReviewCommentState.decoder


{-| Identifies when the comment was last updated.
-}
updatedAt : SelectionSet GitHub.ScalarCodecs.DateTime GitHub.Object.PullRequestReviewComment
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL permalink for this review comment.
-}
url : SelectionSet GitHub.ScalarCodecs.Uri GitHub.Object.PullRequestReviewComment
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias UserContentEditsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of edits to this content.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
userContentEdits :
    (UserContentEditsOptionalArguments -> UserContentEditsOptionalArguments)
    -> SelectionSet decodesTo GitHub.Object.UserContentEditConnection
    -> SelectionSet (Maybe decodesTo) GitHub.Object.PullRequestReviewComment
userContentEdits fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "userContentEdits" optionalArgs object_ (identity >> Decode.nullable)


{-| Check if the current viewer can delete this object.
-}
viewerCanDelete : SelectionSet Bool GitHub.Object.PullRequestReviewComment
viewerCanDelete =
    Object.selectionForField "Bool" "viewerCanDelete" [] Decode.bool


{-| Check if the current viewer can minimize this object.
-}
viewerCanMinimize : SelectionSet Bool GitHub.Object.PullRequestReviewComment
viewerCanMinimize =
    Object.selectionForField "Bool" "viewerCanMinimize" [] Decode.bool


{-| Can user react to this subject
-}
viewerCanReact : SelectionSet Bool GitHub.Object.PullRequestReviewComment
viewerCanReact =
    Object.selectionForField "Bool" "viewerCanReact" [] Decode.bool


{-| Check if the current viewer can update this object.
-}
viewerCanUpdate : SelectionSet Bool GitHub.Object.PullRequestReviewComment
viewerCanUpdate =
    Object.selectionForField "Bool" "viewerCanUpdate" [] Decode.bool


{-| Reasons why the current viewer can not update this comment.
-}
viewerCannotUpdateReasons : SelectionSet (List GitHub.Enum.CommentCannotUpdateReason.CommentCannotUpdateReason) GitHub.Object.PullRequestReviewComment
viewerCannotUpdateReasons =
    Object.selectionForField "(List Enum.CommentCannotUpdateReason.CommentCannotUpdateReason)" "viewerCannotUpdateReasons" [] (GitHub.Enum.CommentCannotUpdateReason.decoder |> Decode.list)


{-| Did the viewer author this comment.
-}
viewerDidAuthor : SelectionSet Bool GitHub.Object.PullRequestReviewComment
viewerDidAuthor =
    Object.selectionForField "Bool" "viewerDidAuthor" [] Decode.bool
