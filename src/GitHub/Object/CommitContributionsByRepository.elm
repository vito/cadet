-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Object.CommitContributionsByRepository exposing (..)

import GitHub.InputObject
import GitHub.Interface
import GitHub.Object
import GitHub.Scalar
import GitHub.ScalarCodecs
import GitHub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias ContributionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument GitHub.InputObject.CommitContributionOrder
    }


{-| The commit contributions, each representing a day.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for commit contributions returned from the connection.

-}
contributions :
    (ContributionsOptionalArguments -> ContributionsOptionalArguments)
    -> SelectionSet decodesTo GitHub.Object.CreatedCommitContributionConnection
    -> SelectionSet decodesTo GitHub.Object.CommitContributionsByRepository
contributions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy GitHub.InputObject.encodeCommitContributionOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "contributions" optionalArgs object_ identity


{-| The repository in which the commits were made.
-}
repository :
    SelectionSet decodesTo GitHub.Object.Repository
    -> SelectionSet decodesTo GitHub.Object.CommitContributionsByRepository
repository object_ =
    Object.selectionForCompositeField "repository" [] object_ identity


{-| The HTTP path for the user's commits to the repository in this time range.
-}
resourcePath : SelectionSet GitHub.ScalarCodecs.Uri GitHub.Object.CommitContributionsByRepository
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for the user's commits to the repository in this time range.
-}
url : SelectionSet GitHub.ScalarCodecs.Uri GitHub.Object.CommitContributionsByRepository
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)
