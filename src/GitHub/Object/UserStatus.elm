-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Object.UserStatus exposing (..)

import GitHub.InputObject
import GitHub.Interface
import GitHub.Object
import GitHub.Scalar
import GitHub.ScalarCodecs
import GitHub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet GitHub.ScalarCodecs.DateTime GitHub.Object.UserStatus
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| An emoji summarizing the user's status.
-}
emoji : SelectionSet (Maybe String) GitHub.Object.UserStatus
emoji =
    Object.selectionForField "(Maybe String)" "emoji" [] (Decode.string |> Decode.nullable)


{-| The status emoji as HTML.
-}
emojiHTML : SelectionSet (Maybe GitHub.ScalarCodecs.Html) GitHub.Object.UserStatus
emojiHTML =
    Object.selectionForField "(Maybe ScalarCodecs.Html)" "emojiHTML" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecHtml |> .decoder |> Decode.nullable)


{-| If set, the status will not be shown after this date.
-}
expiresAt : SelectionSet (Maybe GitHub.ScalarCodecs.DateTime) GitHub.Object.UserStatus
expiresAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "expiresAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| ID of the object.
-}
id : SelectionSet GitHub.ScalarCodecs.Id GitHub.Object.UserStatus
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether this status indicates the user is not fully available on GitHub.
-}
indicatesLimitedAvailability : SelectionSet Bool GitHub.Object.UserStatus
indicatesLimitedAvailability =
    Object.selectionForField "Bool" "indicatesLimitedAvailability" [] Decode.bool


{-| A brief message describing what the user is doing.
-}
message : SelectionSet (Maybe String) GitHub.Object.UserStatus
message =
    Object.selectionForField "(Maybe String)" "message" [] (Decode.string |> Decode.nullable)


{-| The organization whose members can see this status. If null, this status is publicly visible.
-}
organization :
    SelectionSet decodesTo GitHub.Object.Organization
    -> SelectionSet (Maybe decodesTo) GitHub.Object.UserStatus
organization object_ =
    Object.selectionForCompositeField "organization" [] object_ (identity >> Decode.nullable)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet GitHub.ScalarCodecs.DateTime GitHub.Object.UserStatus
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The user who has this status.
-}
user :
    SelectionSet decodesTo GitHub.Object.User
    -> SelectionSet decodesTo GitHub.Object.UserStatus
user object_ =
    Object.selectionForCompositeField "user" [] object_ identity
