-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Object.PullRequestReviewThread exposing (..)

import GitHub.Enum.DiffSide
import GitHub.InputObject
import GitHub.Interface
import GitHub.Object
import GitHub.Scalar
import GitHub.ScalarCodecs
import GitHub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias CommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , skip : OptionalArgument Int
    }


{-| A list of pull request comments associated with the thread.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - skip - Skips the first _n_ elements in the list.

-}
comments :
    (CommentsOptionalArguments -> CommentsOptionalArguments)
    -> SelectionSet decodesTo GitHub.Object.PullRequestReviewCommentConnection
    -> SelectionSet decodesTo GitHub.Object.PullRequestReviewThread
comments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, skip = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "skip" filledInOptionals.skip Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "comments" optionalArgs object_ identity


{-| The side of the diff on which this thread was placed.
-}
diffSide : SelectionSet GitHub.Enum.DiffSide.DiffSide GitHub.Object.PullRequestReviewThread
diffSide =
    Object.selectionForField "Enum.DiffSide.DiffSide" "diffSide" [] GitHub.Enum.DiffSide.decoder


id : SelectionSet GitHub.ScalarCodecs.Id GitHub.Object.PullRequestReviewThread
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether this thread has been resolved
-}
isResolved : SelectionSet Bool GitHub.Object.PullRequestReviewThread
isResolved =
    Object.selectionForField "Bool" "isResolved" [] Decode.bool


{-| The line in the file to which this thread refers
-}
line : SelectionSet (Maybe Int) GitHub.Object.PullRequestReviewThread
line =
    Object.selectionForField "(Maybe Int)" "line" [] (Decode.int |> Decode.nullable)


{-| The original line in the file to which this thread refers.
-}
originalLine : SelectionSet (Maybe Int) GitHub.Object.PullRequestReviewThread
originalLine =
    Object.selectionForField "(Maybe Int)" "originalLine" [] (Decode.int |> Decode.nullable)


{-| The original start line in the file to which this thread refers (multi-line only).
-}
originalStartLine : SelectionSet (Maybe Int) GitHub.Object.PullRequestReviewThread
originalStartLine =
    Object.selectionForField "(Maybe Int)" "originalStartLine" [] (Decode.int |> Decode.nullable)


{-| Identifies the pull request associated with this thread.
-}
pullRequest :
    SelectionSet decodesTo GitHub.Object.PullRequest
    -> SelectionSet decodesTo GitHub.Object.PullRequestReviewThread
pullRequest object_ =
    Object.selectionForCompositeField "pullRequest" [] object_ identity


{-| Identifies the repository associated with this thread.
-}
repository :
    SelectionSet decodesTo GitHub.Object.Repository
    -> SelectionSet decodesTo GitHub.Object.PullRequestReviewThread
repository object_ =
    Object.selectionForCompositeField "repository" [] object_ identity


{-| The user who resolved this thread
-}
resolvedBy :
    SelectionSet decodesTo GitHub.Object.User
    -> SelectionSet (Maybe decodesTo) GitHub.Object.PullRequestReviewThread
resolvedBy object_ =
    Object.selectionForCompositeField "resolvedBy" [] object_ (identity >> Decode.nullable)


{-| The side of the diff that the first line of the thread starts on (multi-line only)
-}
startDiffSide : SelectionSet (Maybe GitHub.Enum.DiffSide.DiffSide) GitHub.Object.PullRequestReviewThread
startDiffSide =
    Object.selectionForField "(Maybe Enum.DiffSide.DiffSide)" "startDiffSide" [] (GitHub.Enum.DiffSide.decoder |> Decode.nullable)


{-| The start line in the file to which this thread refers (multi-line only)
-}
startLine : SelectionSet (Maybe Int) GitHub.Object.PullRequestReviewThread
startLine =
    Object.selectionForField "(Maybe Int)" "startLine" [] (Decode.int |> Decode.nullable)


{-| Whether or not the viewer can resolve this thread
-}
viewerCanResolve : SelectionSet Bool GitHub.Object.PullRequestReviewThread
viewerCanResolve =
    Object.selectionForField "Bool" "viewerCanResolve" [] Decode.bool


{-| Whether or not the viewer can unresolve this thread
-}
viewerCanUnresolve : SelectionSet Bool GitHub.Object.PullRequestReviewThread
viewerCanUnresolve =
    Object.selectionForField "Bool" "viewerCanUnresolve" [] Decode.bool
