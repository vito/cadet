-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Interface.RepositoryInfo exposing (..)

import GitHub.Enum.RepositoryLockReason
import GitHub.InputObject
import GitHub.Interface
import GitHub.Object
import GitHub.Scalar
import GitHub.ScalarCodecs
import GitHub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onRepository : SelectionSet decodesTo GitHub.Object.Repository
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo GitHub.Interface.RepositoryInfo
fragments selections =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Repository" selections.onRepository
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onRepository = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet GitHub.ScalarCodecs.DateTime GitHub.Interface.RepositoryInfo
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The description of the repository.
-}
description : SelectionSet (Maybe String) GitHub.Interface.RepositoryInfo
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| The description of the repository rendered to HTML.
-}
descriptionHTML : SelectionSet GitHub.ScalarCodecs.Html GitHub.Interface.RepositoryInfo
descriptionHTML =
    Object.selectionForField "ScalarCodecs.Html" "descriptionHTML" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| Returns how many forks there are of this repository in the whole network.
-}
forkCount : SelectionSet Int GitHub.Interface.RepositoryInfo
forkCount =
    Object.selectionForField "Int" "forkCount" [] Decode.int


{-| Indicates if the repository has issues feature enabled.
-}
hasIssuesEnabled : SelectionSet Bool GitHub.Interface.RepositoryInfo
hasIssuesEnabled =
    Object.selectionForField "Bool" "hasIssuesEnabled" [] Decode.bool


{-| Indicates if the repository has the Projects feature enabled.
-}
hasProjectsEnabled : SelectionSet Bool GitHub.Interface.RepositoryInfo
hasProjectsEnabled =
    Object.selectionForField "Bool" "hasProjectsEnabled" [] Decode.bool


{-| Indicates if the repository has wiki feature enabled.
-}
hasWikiEnabled : SelectionSet Bool GitHub.Interface.RepositoryInfo
hasWikiEnabled =
    Object.selectionForField "Bool" "hasWikiEnabled" [] Decode.bool


{-| The repository's URL.
-}
homepageUrl : SelectionSet (Maybe GitHub.ScalarCodecs.Uri) GitHub.Interface.RepositoryInfo
homepageUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "homepageUrl" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


{-| Indicates if the repository is unmaintained.
-}
isArchived : SelectionSet Bool GitHub.Interface.RepositoryInfo
isArchived =
    Object.selectionForField "Bool" "isArchived" [] Decode.bool


{-| Identifies if the repository is a fork.
-}
isFork : SelectionSet Bool GitHub.Interface.RepositoryInfo
isFork =
    Object.selectionForField "Bool" "isFork" [] Decode.bool


{-| Indicates if the repository has been locked or not.
-}
isLocked : SelectionSet Bool GitHub.Interface.RepositoryInfo
isLocked =
    Object.selectionForField "Bool" "isLocked" [] Decode.bool


{-| Identifies if the repository is a mirror.
-}
isMirror : SelectionSet Bool GitHub.Interface.RepositoryInfo
isMirror =
    Object.selectionForField "Bool" "isMirror" [] Decode.bool


{-| Identifies if the repository is private.
-}
isPrivate : SelectionSet Bool GitHub.Interface.RepositoryInfo
isPrivate =
    Object.selectionForField "Bool" "isPrivate" [] Decode.bool


{-| Identifies if the repository is a template that can be used to generate new repositories.
-}
isTemplate : SelectionSet Bool GitHub.Interface.RepositoryInfo
isTemplate =
    Object.selectionForField "Bool" "isTemplate" [] Decode.bool


{-| The license associated with the repository
-}
licenseInfo :
    SelectionSet decodesTo GitHub.Object.License
    -> SelectionSet (Maybe decodesTo) GitHub.Interface.RepositoryInfo
licenseInfo object_ =
    Object.selectionForCompositeField "licenseInfo" [] object_ (identity >> Decode.nullable)


{-| The reason the repository has been locked.
-}
lockReason : SelectionSet (Maybe GitHub.Enum.RepositoryLockReason.RepositoryLockReason) GitHub.Interface.RepositoryInfo
lockReason =
    Object.selectionForField "(Maybe Enum.RepositoryLockReason.RepositoryLockReason)" "lockReason" [] (GitHub.Enum.RepositoryLockReason.decoder |> Decode.nullable)


{-| The repository's original mirror URL.
-}
mirrorUrl : SelectionSet (Maybe GitHub.ScalarCodecs.Uri) GitHub.Interface.RepositoryInfo
mirrorUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "mirrorUrl" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


{-| The name of the repository.
-}
name : SelectionSet String GitHub.Interface.RepositoryInfo
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| The repository's name with owner.
-}
nameWithOwner : SelectionSet String GitHub.Interface.RepositoryInfo
nameWithOwner =
    Object.selectionForField "String" "nameWithOwner" [] Decode.string


{-| The image used to represent this repository in Open Graph data.
-}
openGraphImageUrl : SelectionSet GitHub.ScalarCodecs.Uri GitHub.Interface.RepositoryInfo
openGraphImageUrl =
    Object.selectionForField "ScalarCodecs.Uri" "openGraphImageUrl" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The User owner of the repository.
-}
owner :
    SelectionSet decodesTo GitHub.Interface.RepositoryOwner
    -> SelectionSet decodesTo GitHub.Interface.RepositoryInfo
owner object_ =
    Object.selectionForCompositeField "owner" [] object_ identity


{-| Identifies when the repository was last pushed to.
-}
pushedAt : SelectionSet (Maybe GitHub.ScalarCodecs.DateTime) GitHub.Interface.RepositoryInfo
pushedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "pushedAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| The HTTP path for this repository
-}
resourcePath : SelectionSet GitHub.ScalarCodecs.Uri GitHub.Interface.RepositoryInfo
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias ShortDescriptionHTMLOptionalArguments =
    { limit : OptionalArgument Int }


{-| A description of the repository, rendered to HTML without any links in it.

  - limit - How many characters to return.

-}
shortDescriptionHTML :
    (ShortDescriptionHTMLOptionalArguments -> ShortDescriptionHTMLOptionalArguments)
    -> SelectionSet GitHub.ScalarCodecs.Html GitHub.Interface.RepositoryInfo
shortDescriptionHTML fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { limit = Absent }

        optionalArgs =
            [ Argument.optional "limit" filledInOptionals.limit Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForField "ScalarCodecs.Html" "shortDescriptionHTML" optionalArgs (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet GitHub.ScalarCodecs.DateTime GitHub.Interface.RepositoryInfo
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this repository
-}
url : SelectionSet GitHub.ScalarCodecs.Uri GitHub.Interface.RepositoryInfo
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
-}
usesCustomOpenGraphImage : SelectionSet Bool GitHub.Interface.RepositoryInfo
usesCustomOpenGraphImage =
    Object.selectionForField "Bool" "usesCustomOpenGraphImage" [] Decode.bool
