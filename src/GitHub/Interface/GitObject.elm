-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Interface.GitObject exposing (..)

import GitHub.InputObject
import GitHub.Interface
import GitHub.Object
import GitHub.Scalar
import GitHub.ScalarCodecs
import GitHub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onBlob : SelectionSet decodesTo GitHub.Object.Blob
    , onCommit : SelectionSet decodesTo GitHub.Object.Commit
    , onTag : SelectionSet decodesTo GitHub.Object.Tag
    , onTree : SelectionSet decodesTo GitHub.Object.Tree
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo GitHub.Interface.GitObject
fragments selections =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Blob" selections.onBlob
        , Object.buildFragment "Commit" selections.onCommit
        , Object.buildFragment "Tag" selections.onTag
        , Object.buildFragment "Tree" selections.onTree
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onBlob = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onCommit = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onTag = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onTree = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| An abbreviated version of the Git object ID
-}
abbreviatedOid : SelectionSet String GitHub.Interface.GitObject
abbreviatedOid =
    Object.selectionForField "String" "abbreviatedOid" [] Decode.string


{-| The HTTP path for this Git object
-}
commitResourcePath : SelectionSet GitHub.ScalarCodecs.Uri GitHub.Interface.GitObject
commitResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "commitResourcePath" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for this Git object
-}
commitUrl : SelectionSet GitHub.ScalarCodecs.Uri GitHub.Interface.GitObject
commitUrl =
    Object.selectionForField "ScalarCodecs.Uri" "commitUrl" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


id : SelectionSet GitHub.ScalarCodecs.Id GitHub.Interface.GitObject
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The Git object ID
-}
oid : SelectionSet GitHub.ScalarCodecs.GitObjectID GitHub.Interface.GitObject
oid =
    Object.selectionForField "ScalarCodecs.GitObjectID" "oid" [] (GitHub.ScalarCodecs.codecs |> GitHub.Scalar.unwrapCodecs |> .codecGitObjectID |> .decoder)


{-| The Repository the Git object belongs to
-}
repository :
    SelectionSet decodesTo GitHub.Object.Repository
    -> SelectionSet decodesTo GitHub.Interface.GitObject
repository object_ =
    Object.selectionForCompositeField "repository" [] object_ identity
