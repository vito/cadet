-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Enum.PullRequestReviewDecision exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The review status of a pull request.

  - ChangesRequested - Changes have been requested on the pull request.
  - Approved - The pull request has received an approving review.
  - ReviewRequired - A review is required before the pull request can be merged.

-}
type PullRequestReviewDecision
    = ChangesRequested
    | Approved
    | ReviewRequired


list : List PullRequestReviewDecision
list =
    [ ChangesRequested, Approved, ReviewRequired ]


decoder : Decoder PullRequestReviewDecision
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "CHANGES_REQUESTED" ->
                        Decode.succeed ChangesRequested

                    "APPROVED" ->
                        Decode.succeed Approved

                    "REVIEW_REQUIRED" ->
                        Decode.succeed ReviewRequired

                    _ ->
                        Decode.fail ("Invalid PullRequestReviewDecision type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PullRequestReviewDecision -> String
toString enum =
    case enum of
        ChangesRequested ->
            "CHANGES_REQUESTED"

        Approved ->
            "APPROVED"

        ReviewRequired ->
            "REVIEW_REQUIRED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PullRequestReviewDecision
fromString enumString =
    case enumString of
        "CHANGES_REQUESTED" ->
            Just ChangesRequested

        "APPROVED" ->
            Just Approved

        "REVIEW_REQUIRED" ->
            Just ReviewRequired

        _ ->
            Nothing
