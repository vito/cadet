-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Enum.UserBlockDuration exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible durations that a user can be blocked for.

  - OneDay - The user was blocked for 1 day
  - ThreeDays - The user was blocked for 3 days
  - OneWeek - The user was blocked for 7 days
  - OneMonth - The user was blocked for 30 days
  - Permanent - The user was blocked permanently

-}
type UserBlockDuration
    = OneDay
    | ThreeDays
    | OneWeek
    | OneMonth
    | Permanent


list : List UserBlockDuration
list =
    [ OneDay, ThreeDays, OneWeek, OneMonth, Permanent ]


decoder : Decoder UserBlockDuration
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ONE_DAY" ->
                        Decode.succeed OneDay

                    "THREE_DAYS" ->
                        Decode.succeed ThreeDays

                    "ONE_WEEK" ->
                        Decode.succeed OneWeek

                    "ONE_MONTH" ->
                        Decode.succeed OneMonth

                    "PERMANENT" ->
                        Decode.succeed Permanent

                    _ ->
                        Decode.fail ("Invalid UserBlockDuration type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserBlockDuration -> String
toString enum =
    case enum of
        OneDay ->
            "ONE_DAY"

        ThreeDays ->
            "THREE_DAYS"

        OneWeek ->
            "ONE_WEEK"

        OneMonth ->
            "ONE_MONTH"

        Permanent ->
            "PERMANENT"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserBlockDuration
fromString enumString =
    case enumString of
        "ONE_DAY" ->
            Just OneDay

        "THREE_DAYS" ->
            Just ThreeDays

        "ONE_WEEK" ->
            Just OneWeek

        "ONE_MONTH" ->
            Just OneMonth

        "PERMANENT" ->
            Just Permanent

        _ ->
            Nothing
