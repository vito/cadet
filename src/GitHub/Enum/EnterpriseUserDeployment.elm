-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Enum.EnterpriseUserDeployment exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible GitHub Enterprise deployments where this user can exist.

  - Cloud - The user is part of a GitHub Enterprise Cloud deployment.
  - Server - The user is part of a GitHub Enterprise Server deployment.

-}
type EnterpriseUserDeployment
    = Cloud
    | Server


list : List EnterpriseUserDeployment
list =
    [ Cloud, Server ]


decoder : Decoder EnterpriseUserDeployment
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "CLOUD" ->
                        Decode.succeed Cloud

                    "SERVER" ->
                        Decode.succeed Server

                    _ ->
                        Decode.fail ("Invalid EnterpriseUserDeployment type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : EnterpriseUserDeployment -> String
toString enum =
    case enum of
        Cloud ->
            "CLOUD"

        Server ->
            "SERVER"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe EnterpriseUserDeployment
fromString enumString =
    case enumString of
        "CLOUD" ->
            Just Cloud

        "SERVER" ->
            Just Server

        _ ->
            Nothing
