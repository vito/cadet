-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Enum.DiffSide exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible sides of a diff.

  - Left - The left side of the diff.
  - Right - The right side of the diff.

-}
type DiffSide
    = Left
    | Right


list : List DiffSide
list =
    [ Left, Right ]


decoder : Decoder DiffSide
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "LEFT" ->
                        Decode.succeed Left

                    "RIGHT" ->
                        Decode.succeed Right

                    _ ->
                        Decode.fail ("Invalid DiffSide type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : DiffSide -> String
toString enum =
    case enum of
        Left ->
            "LEFT"

        Right ->
            "RIGHT"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe DiffSide
fromString enumString =
    case enumString of
        "LEFT" ->
            Just Left

        "RIGHT" ->
            Just Right

        _ ->
            Nothing
