-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Enum.SamlDigestAlgorithm exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible digest algorithms used to sign SAML requests for an identity provider.

  - Sha1 - SHA1
  - Sha256 - SHA256
  - Sha384 - SHA384
  - Sha512 - SHA512

-}
type SamlDigestAlgorithm
    = Sha1
    | Sha256
    | Sha384
    | Sha512


list : List SamlDigestAlgorithm
list =
    [ Sha1, Sha256, Sha384, Sha512 ]


decoder : Decoder SamlDigestAlgorithm
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "SHA1" ->
                        Decode.succeed Sha1

                    "SHA256" ->
                        Decode.succeed Sha256

                    "SHA384" ->
                        Decode.succeed Sha384

                    "SHA512" ->
                        Decode.succeed Sha512

                    _ ->
                        Decode.fail ("Invalid SamlDigestAlgorithm type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : SamlDigestAlgorithm -> String
toString enum =
    case enum of
        Sha1 ->
            "SHA1"

        Sha256 ->
            "SHA256"

        Sha384 ->
            "SHA384"

        Sha512 ->
            "SHA512"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SamlDigestAlgorithm
fromString enumString =
    case enumString of
        "SHA1" ->
            Just Sha1

        "SHA256" ->
            Just Sha256

        "SHA384" ->
            Just Sha384

        "SHA512" ->
            Just Sha512

        _ ->
            Nothing
