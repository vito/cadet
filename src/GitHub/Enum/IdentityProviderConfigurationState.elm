-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Enum.IdentityProviderConfigurationState exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible states in which authentication can be configured with an identity provider.

  - Enforced - Authentication with an identity provider is configured and enforced.
  - Configured - Authentication with an identity provider is configured but not enforced.
  - Unconfigured - Authentication with an identity provider is not configured.

-}
type IdentityProviderConfigurationState
    = Enforced
    | Configured
    | Unconfigured


list : List IdentityProviderConfigurationState
list =
    [ Enforced, Configured, Unconfigured ]


decoder : Decoder IdentityProviderConfigurationState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ENFORCED" ->
                        Decode.succeed Enforced

                    "CONFIGURED" ->
                        Decode.succeed Configured

                    "UNCONFIGURED" ->
                        Decode.succeed Unconfigured

                    _ ->
                        Decode.fail ("Invalid IdentityProviderConfigurationState type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : IdentityProviderConfigurationState -> String
toString enum =
    case enum of
        Enforced ->
            "ENFORCED"

        Configured ->
            "CONFIGURED"

        Unconfigured ->
            "UNCONFIGURED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe IdentityProviderConfigurationState
fromString enumString =
    case enumString of
        "ENFORCED" ->
            Just Enforced

        "CONFIGURED" ->
            Just Configured

        "UNCONFIGURED" ->
            Just Unconfigured

        _ ->
            Nothing
